%% Matrizes de movimento do Braço


%% Setup
clc;
tic
clear;

%% Modelo geométrico inverso
%set das posição inicial e final do braço
tic
now.q = [0, 0, 0, 0, 0, 0];
[pos, rot] = robotic_position(now.q);
now.x = pos(1);
now.y = pos(2);
now.z = pos(3);
now.phi = rot(1);
now.theta = rot(2);
now.psi = rot(3);


dream.q = [5,3,2,22,55,77];
[pos, rot] = robotic_position(dream.q);
dream.x = pos(1);
dream.y = pos(2);
dream.z = pos(3);
dream.phi = rot(1);
dream.theta = rot(2);
dream.psi = rot(3);

%% Iterador
%loop de tentativa e erro que busca reduzir o erro entre o ponto desejado e
%o em que se encontra o braço

%parâmetros das iterações
resolution_base = 50;                             %rotação base incial 10°
resolution = resolution_base;          %resolução do movimento de cada junta juntas durante as iterações
resolution_iterator = 0.95;                      %resolução com que é ajustada a resolução do movimento das juntas
i = 0;                                          %número de iterações
%i_max = 2000000;                                %número de iterações máxima
min_error = 1;                                  %erro desejado
error = coord_error(now,dream);                 %cálculo do vetor de erro
error_comparator = [norm(error) norm(error)];
trigger = 0;                                    %sinaliza que a resolução atual não movimenta a junta de forma a diminuir o erro
                                                %só é útil nos casos em que arotação em nenhum sentido colabora na redução do erro                                      

while norm(error) > min_error
    
    %loop que varre
    for q = 1:6
        
        for resolution = [1  2/3  1/3]*revolution_base
            
            %faz o movimento mínimo na junta
            now_inicial = now;
            now_pos = update_now(now, q, resolution);
            error_pos = coord_error(now,dream);
        
            %faz o movimento mínimo pro outro lado
            now_neg = update_now(now, q, -2*resolution);
            error_neg = coord_error(now,dream);
            
            %vê qual sentido é melhor
            if norm(error_pos) <= norm(error_neg)  
                sentido = 1;
                now = temp;
            else
                sentido = -1;
            end
        
            new_erro = coord_error(now,dream);
            
            if norm(new_error) < norm(error)
                melhorei = 1;
                if sentido == 1
                    %Enquanto o erro diminuir, ajuste
                    while norm(new_error) < norm(error)
                        error = new_error;
                        now = update_now(now, q, resolution);
                        new_error = coord_error(now,dream);
                    end
                else
                    %Enquanto o erro diminuir, ajuste
                    while norm(new_error) < norm(error)
                        error = new_error;
                        now = update_now(now, q, -resolution);
                        new_error = coord_error(now,dream);
                    end
                end
            end
            
            %correção do overshoot do ajuste do error, pois o while só sai
            %do loop rodou demias
            if melhorei == 1
                if sentido == 1
                    now = update_now(now, q, -resolution);
                    error = new_error;
                else
                    now = update_now(now, q,+resolution);
                    error = new_error;
                end
                
            end

%         %testa se o movimento aumentou o erro, e move para o outro lado, se
%         %preciso
%         if norm(new_error) > norm(error)
%             temp = norm(new_error);
%             resolution = -1*resolution;
%             now = update_now(now, q, 2*resolution);
%             new_error = coord_error(now,dream);
%             
%             %se pro outro lado piorou mais ainda, volta o resolution
%             if norm(new_error) > temp
%                 resolution = -1*resolution;
%                 now = update_now(now, q, resolution); %volta pra posição inicial
%                 trigger =1;
%             end
%         end
%         

        
        %corrige ultimo erro
        if trigger ~= 1
            now = update_now(now, q, -1*resolution);
            error = coord_error(now,dream);
        else
            trigger = 0;
        end
        
        

        
%         if norm(new_error) > norm(error)
%             now = update_now(now, q, -1*resolution(q)); %concerta o movimento, pois nenhum dos dois deu certo
%             resolution(q) = resolution(q)*revolution_iterator;
%         else
%             error = new_error;
%         end

        
    end
    
    error_comparator(1) = norm(error);
    if error_comparator(1) == error_comparator(2) 
        resolution_base = resolution_base*resolution_iterator;
    else
       error_comparator(2) = error_comparator(1); 
    
    end
    
%       %plot iterações
%     if rem(i,5) == 0
%         robotic_arm(now.q);
%     end
%     clc

%        %informações de debug
        i = i+1;
        
    i 
    norm(error)
    s = toc
end

now
dream
s = toc
i